import requests
import pandas as pd
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import time


# 1. Function to Fetch Forex Data from Alpha Vantage API
def fetch_data(from_currency, to_currency, api_key):
    url = f'https://www.alphavantage.co/query'
    params = {
        'function': 'FX_INTRADAY',
        'from_symbol': from_currency,
        'to_symbol': to_currency,
        'interval': '1min',  # You can change this to 1min, 15min, etc.
        'apikey': api_key,
        'outputsize': 'full'
    }
    response = requests.get(url, params=params)
    data = response.json()

    # Check if the request is successful
    if "Time Series FX (5min)" not in data:
        raise ValueError(f"Error fetching data: {data.get('Error Message', 'Unknown error')}")

    # Convert response into DataFrame
    df = pd.DataFrame.from_dict(data['Time Series FX (5min)'], orient='index')
    df = df.astype(float)
    df.index = pd.to_datetime(df.index)

    return df


# 2. Function for Feature Engineering
def add_features(df):
    # Adding moving averages
    df['SMA_5'] = df['4. close'].rolling(window=5).mean()
    df['SMA_20'] = df['4. close'].rolling(window=20).mean()
    df['SMA_50'] = df['4. close'].rolling(window=50).mean()

    # Adding Relative Strength Index (RSI)
    delta = df['4. close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)

    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()

    rs = avg_gain / avg_loss
    df['RSI'] = 100 - (100 / (1 + rs))

    # Drop NA values generated by rolling
    df = df.dropna()

    return df


# 3. Prepare Data for Training (Supervised Learning)
def prepare_data(df):
    df['Price_Change'] = df['4. close'].shift(-1) - df['4. close']

    # Create labels: 1 for "Buy" (Price goes up), 0 for "Sell" (Price goes down)
    df['Target'] = (df['Price_Change'] > 0).astype(int)

    # Features: SMA, RSI, etc.
    features = ['SMA_5', 'SMA_20', 'SMA_50', 'RSI']

    # Split into X (features) and y (target)
    X = df[features]
    y = df['Target']

    return X, y


# 4. Train XGBoost Model
def train_model(X, y):
    # Split data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Initialize XGBoost model
    model = xgb.XGBClassifier(use_label_encoder=False, eval_metric='logloss')
    model.fit(X_train, y_train)

    # Evaluate model
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f'Model Accuracy: {accuracy * 100:.2f}%')

    return model


# 5. Function to Make Predictions
def make_prediction(model, df):
    X_new = df[['SMA_5', 'SMA_20', 'SMA_50', 'RSI']].iloc[-1:].values
    prediction = model.predict(X_new)
    signal = 'Buy' if prediction == 1 else 'Sell'
    return signal


# 6. Main Function to Run the Trading Bot
def run_bot(api_key, from_currency, to_currency):
    # Fetch data from Alpha Vantage API
    df = fetch_data(from_currency, to_currency, api_key)

    # Add features (SMA, RSI)
    df = add_features(df)

    # Prepare data for training
    X, y = prepare_data(df)

    # Train the model
    model = train_model(X, y)

    # Loop to make real-time predictions (every 5 minutes)
    while True:
        print(f"Fetching latest data for {from_currency}/{to_currency}...")
        df = fetch_data(from_currency, to_currency, api_key)

        # Add features to the new data
        df = add_features(df)

        # Make a prediction (Buy/Sell)
        signal = make_prediction(model, df)

        print(f"Prediction: {signal}")

        # Sleep for 5 minutes before making the next prediction
        time.sleep(300)  # 5 minutes = 300 seconds


if __name__ == '_main_':
    # Define your API key and forex pair
    api_key = 'PN0ZVL1PTKN8G024'
    from_currency = 'EUR'
    to_currency = 'USD'

    run_bot(api_key, from_currency, to_currency)